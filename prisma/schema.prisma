// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleName {
  driver
  manager
  socialMedia
}

enum EventType {
  sprint
  endurance
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Team {
  id                 String               @id @default(cuid())
  name               String
  managerId          String               @unique
  socialMediaId      String?              @unique
  manager            User                 @relation(fields: [managerId], references: [id], name: "manager-team", onUpdate: NoAction, onDelete: NoAction)
  socialMedia        User?                @relation(fields: [socialMediaId], references: [id], name: "social-media-team", onUpdate: NoAction, onDelete: NoAction)
  drivers            User[]
  events             Event[]
  championships      Championship[]
  results            Result[]
  ChampionshipResult ChampionshipResult[]
}

model User {
  id                          String                       @id @default(cuid())
  name                        String?
  email                       String?                      @unique
  emailVerified               DateTime?
  image                       String?
  accounts                    Account[]
  sessions                    Session[]
  roles                       Role[]
  championships               Championship[]               @relation(name: "drivers-championship")
  events                      Event[]                      @relation(name: "drivers")
  managingEvents              Event[]                      @relation(name: "manager")
  managingTeam                Team?                        @relation(name: "manager-team")
  socialManagingTeam          Team?                        @relation(name: "social-media-team")
  team                        Team?                        @relation(fields: [teamId], references: [id])
  teamId                      String?
  managingChampionships       Championship[]
  results                     Result[]
  champResults                ChampionshipResult[]
  newResultNotifications      NewResultNotification[]
  newChampResultNotifications NewChampResultNotification[]

  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id   String   @id @default(cuid())
  name RoleName @unique

  users User[]
}

model Championship {
  id        String              @id @default(cuid())
  organizer String
  link      String
  name      String
  car       String?
  type      EventType
  events    Event[]
  drivers   User[]              @relation(name: "drivers-championship")
  manager   User?               @relation(fields: [managerId], references: [id])
  managerId String?
  team      Team?               @relation(fields: [teamId], references: [id])
  teamId    String?
  result    ChampionshipResult?

  @@index([managerId])
  @@index([teamId])
}

model Event {
  id             String        @id @default(cuid())
  title          String?
  date           DateTime
  type           EventType
  car            String
  track          String
  duration       Int
  championshipId String?
  managerId      String?
  championship   Championship? @relation(fields: [championshipId], references: [id], onDelete: Cascade)
  drivers        User[]        @relation(name: "drivers")
  manager        User?         @relation(fields: [managerId], references: [id], name: "manager")
  team           Team?         @relation(fields: [teamId], references: [id])
  teamId         String?
  result         Result?

  @@index([championshipId])
  @@index([teamId])
  @@index([managerId])
}

model Result {
  id                     String                  @id @default(cuid())
  qualiPosition          Int?                    @db.UnsignedTinyInt
  racePosition           Int?                    @db.UnsignedTinyInt
  DNF                    Boolean                 @default(false)
  DNS                    Boolean                 @default(false)
  DSQ                    Boolean                 @default(false)
  notes                  String?                 @db.Text
  eventId                String                  @unique
  event                  Event                   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  teamId                 String
  team                   Team                    @relation(fields: [teamId], references: [id])
  author                 User                    @relation(fields: [authorId], references: [id])
  authorId               String
  createdAt              DateTime                @default(now())
  newResultNotifications NewResultNotification[]

  @@index([teamId])
  @@index([authorId])
}

model ChampionshipResult {
  id                     String                       @id @default(cuid())
  position               Int                          @db.UnsignedTinyInt
  championshipId         String                       @unique
  championship           Championship                 @relation(fields: [championshipId], references: [id], onDelete: Cascade)
  teamId                 String
  team                   Team                         @relation(fields: [teamId], references: [id])
  author                 User                         @relation(fields: [authorId], references: [id])
  authorId               String
  createdAt              DateTime                     @default(now())
  newResultNotifications NewChampResultNotification[]

  @@index([teamId])
  @@index([authorId])
}

model NewResultNotification {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  result     Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)
  resultId   String
  receiver   User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  message    String

  @@index([resultId])
  @@index([receiverId])
}

model NewChampResultNotification {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  read       Boolean            @default(false)
  message    String
  result     ChampionshipResult @relation(fields: [resultId], references: [id])
  resultId   String
  receiver   User               @relation(fields: [receiverId], references: [id])
  receiverId String

  @@index([resultId])
  @@index([receiverId])
}
