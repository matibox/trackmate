generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?

  accounts   Account[]
  sessions   Session[]
  events     Event[]
  eventParts EventPart[]
}

enum EventType {
  sprint
  endurance
}

model Event {
  id   String    @id @default(cuid())
  name String?
  type EventType

  users      User[]
  eventParts EventPart[]
}

enum EventPartType {
  briefing
  practice
  qualifying
  race
}

model EventPart {
  id      String        @id @default(cuid())
  type    EventPartType
  start   DateTime
  end     DateTime
  event   Event         @relation(fields: [eventId], references: [id])
  eventId String

  users User[]

  @@index([eventId])
}

model Result {
  id       String  @id @default(cuid())
  position Int     @db.TinyInt
  note     String?
}
