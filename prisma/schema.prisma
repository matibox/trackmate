generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Game {
  Assetto_Corsa_Competizione
  F1_23
}

enum TeamRole {
  owner
  member
}

enum RosterRole {
  driver
  manager
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  firstName     String?
  lastName      String?
  active        Boolean   @default(false)

  profile  Profile?
  accounts Account[]
  sessions Session[]
  teams    UsersOnTeams[]
  rosters  RosterOnMember[]
}

model Profile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  country  String
  mainGame Game
  bio      String?
}

model UsersOnTeams {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId String
  teamId String
  role   TeamRole

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Team {
  id           String @id @default(cuid())
  name         String @unique
  abbreviation String @unique @db.VarChar(3)
  password     String

  members UsersOnTeams[]
  rosters Roster[]
}

model RosterOnMember {
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  roster   Roster     @relation(fields: [rosterId], references: [id], onDelete: Cascade)
  userId   String
  rosterId String
  role     RosterRole

  @@id([userId, rosterId])
  @@index([userId])
  @@index([rosterId])
}

model Roster {
  id     String @id @default(cuid())
  name   String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  game   Game

  members RosterOnMember[]

  @@unique([name, teamId])
  @@index([teamId])
}
